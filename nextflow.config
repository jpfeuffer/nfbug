/*
 * -------------------------------------------------
 *  nf-core/proteomicslfq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  sdrf = ''
  root_folder = ''
  spectra = ''
  database = ''
  expdesign = ''

  // Tools flags
  posterior_probabilities = 'percolator'
  add_decoys = false
  search_engine = 'comet'
  protein_inference = 'aggregation'
  psm_pep_fdr_cutoff = 0.10
  protein_level_fdr_cutoff = 0.05

  // decoys
  decoy_affix = 'DECOY_'
  affix_type = 'prefix'

  // peak picking if used
  openms_peakpicking = false
  peakpicking_inmemory = false
  peakpicking_ms_levels = '' // means all/auto
  pp_debug = 0

  // shared search engine parameters
  enzyme = 'Trypsin'
  num_enzyme_termini = 'fully'
  allowed_missed_cleavages = 2
  precursor_mass_tolerance = 5
  precursor_mass_tolerance_unit = 'ppm'
  fixed_mods = 'Carbamidomethyl (C)'
  variable_mods = 'Oxidation (M)'
  fragment_mass_tolerance = 0.03
  fragment_mass_tolerance_unit = 'Da'
  fragment_method = 'HCD' //currently unused. hard to find a good logic to beat the defaults
  isotope_error_range = '0,1'
  instrument = '' //auto-determined from tolerances
  protocol = 'automatic'
  min_precursor_charge = 2
  max_precursor_charge = 4
  min_peptide_length = 6
  max_peptide_length = 40
  num_hits = 1
  max_mods = 3
  db_debug = 0

  // PeptideIndexer flags
  IL_equivalent = true
  allow_unmatched = false

  // Percolator flags
  train_FDR = 0.05
  test_FDR = 0.05
  FDR_level = 'peptide-level-fdrs'
  klammer = false
  description_correct_features = 0
  subset_max_train = 300000

  // ProteomicsLFQ flags
  inf_quant_debug = 0
  protein_inference = 'aggregation'
  targeted_only = 'true'
  mass_recalibration = 'false'
  transfer_ids = 'false'

  // MSstats
  skip_post_msstats = false
  ref_condition = ''
  contrasts = ''

  // PTXQC
  enable_qc = false
  ptxqc_report_layout = ''

  outdir = './results'

  // Boilerplate options
  name = false
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/proteomicslfq:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  lsf {
    process.executor = 'lsf'
  }
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/proteomicslfq'
  author = 'Julianus Pfeuffer, Lukas Heumos, Leon Bichmann, Timo Sachsenberg'
  homePage = 'https://github.com/nf-core/proteomicslfq'
  description = 'Proteomics label-free quantification (LFQ) analysis pipeline using OpenMS and MSstats, with feature quantification, feature summarization, quality control and group-based statistical analysis.'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.01.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
